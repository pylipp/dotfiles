#makes some shortcuts available for vim instead for shell
stty -ixon

# VI input mode
set -o vi

command -v bat >/dev/null 2>&1 && alias cat=bat

# General, safe setup for bash/zsh acc. to https://direnv.net/ (section Setup)
command -v direnv >/dev/null 2>&1 && eval "$(direnv hook "$(basename "$SHELL")")"

for dir in ~/.local/pipx/venvs; do
    file="$dir"/virtualenvwrapper/bin/virtualenvwrapper.sh
    if [ -f "$file" ]; then
        . "$file"
        break
    fi
done

#http://askubuntu.com/questions/362280/enter-ssh-passphrase-once
SSH_ENV=$HOME/.ssh/env
if [ ! -e "$SSH_ENV" ]; then
    mkdir -p $HOME/.ssh
    touch "$SSH_ENV"
fi
function start_agent {
    # spawn ssh-agent
    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
    /usr/bin/ssh-add
}

if [ -f "${SSH_ENV}" ]; then
     . "${SSH_ENV}" > /dev/null
     ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
        start_agent;
    }
else
    start_agent;
fi

man() {
    # Colored man pages
    # https://github.com/Bash-it/bash-it/blob/867b0fd11c6a3ee8c399d963ccfbb942bac74bb6/plugins/available/man.plugin.bash
    LESS_TERMCAP_mb=$'\e[1;32m' \
    LESS_TERMCAP_md=$'\e[1;32m' \
    LESS_TERMCAP_me=$'\e[0m' \
    LESS_TERMCAP_se=$'\e[0m' \
    LESS_TERMCAP_so=$'\e[01;33m' \
    LESS_TERMCAP_ue=$'\e[0m' \
    LESS_TERMCAP_us=$'\e[1;4;31m' \
    /usr/bin/man \
    "$@"
}

installed() {
    # check for installed package; all options passed to fzf
    dpkg --list | fzf --multi "$@"
}

backup_reminder() {
    # nag me if last backup was more than two weeks ago
    local backup_dates_file=~/.config/borg/backup_dates
    local today=$(date +%s)
    if [[ -e $backup_dates_file ]]; then
        local last_backup=$(tail -n1 $backup_dates_file)
        if [[ $(($today - $last_backup)) -gt 1209600 ]]; then
            echo -e "\033[0;31m!!! >>> TIME TO BACKUP <<< !!!\n\033[0m"
        fi
    fi
}
backup_reminder

gu() {
    # Git clone URL from clipboard, then change into directory
    local repo
    repo=$(xclip -selection clipboard -o)
    git clone $repo && cd $(basename $repo)
}

wt() {
    # Watson log of Today
    watson log --day --no-pager --current "$@"
}

wy() {
    # Watson log of Yesterday
    local yesterdate=$(date --date yesterday +%F)
    watson log --from $yesterdate --to $yesterdate --no-pager
}

wa() {
    # Watson Add frames for multiple full days
    if [ $# -lt 2 ]; then
        echo "Usage: wa holiday[+vacation|+name]|illness MONTH DAY [DAY...]" >&2
        return 1
    fi

    local year project_tag project tag month date rc
    year=$(date +%Y)
    project_tag=$1
    project=$(echo "$project_tag" | cut -d+ -f1)
    tag=$(echo "$project_tag" | cut -d+ -f2)
    if [ "$tag" = "$project_tag" ]; then
        tag=""
    else
        tag=+"$tag"
    fi
    shift
    month=$1
    shift

    rc=0
    for day in "$@"; do
        date=$year-$month-$day
        watson add "$project" "$tag" --from "$date 08:00:00" --to "$date 16:00:00"
        rc=$((rc + $?))
    done

    return $rc
}

dcleanup(){
    # Cleanup unused Docker resources, https://stackoverflow.com/a/32723127/3865876
    docker rm -v $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
    docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}

# some shortcuts for handling VMs
# docs: https://www.virtualbox.org/manual/ch08.html
vmon() {
    if [[ "$#" -ne 1 ]]; then 
        echo "USAGE: vmon <vm>"
    else
        VBoxManage startvm "$1" --type headless
    fi
}
vmoff() {
    # http://stackoverflow.com/questions/31695600/bash-rematch-doesnt-capture
    setopt KSH_ARRAYS BASH_REMATCH
    if [[ "$#" -eq 0 ]]; then
        running_vms=`VBoxManage list runningvms`
        vm_regex='"(.*)" .*'
        if [[ $running_vms =~ $vm_regex ]]; then
            echo Stopping ${BASH_REMATCH[1]}... 
            VBoxManage controlvm "${BASH_REMATCH[1]}" savestate
        else 
            echo "USAGE: vmoff <vm>"
        fi
    else
        VBoxManage controlvm "$1" savestate
    fi
    unsetopt KSH_ARRAYS
}

scrot() {
    /usr/bin/scrot --exec 'mv $f ~/Pictures' "$@"
}

fj() {
    # Find Jira items. Any command line options are passed to 'jira list'
    case "$1" in
        ''|-h|--help|help )
            jira list --help; return 0 ;;
    esac

    local item
    item="$(jira list "$@" | \
        fzf --preview 'jira view $(echo {} | cut -d: -f1) | bat --color=always --plain --language YAML' \
            --preview-window=:$([ $(tput cols) -gt $(($(tput lines) * 2)) ] && echo right || echo down)
    )"

    if [ "$item" != "" ]; then
        jira browse $(echo "$item" | cut -d: -f1)
    fi
}

[ -e ~/.files/liquidprompt ] && . ~/.files/liquidprompt || true

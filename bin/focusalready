#!/usr/bin/env python3

import subprocess
import time
import os.path
import sys
import argparse


def _notify_send(message, urgency="critical"):
    subprocess.Popen(["notify-send", "-u", urgency, message])


def _run_daemon(task, minutes):
    """Periodically nag about the given task. Messages are cycled."""
    interval = 60 * 15
    total_seconds = 60 * int(minutes)

    messages = [
            "Go start work on '{}'!",
            "Distracted? Focus on '{}'!",
            "Hej, still working on '{}'?",
            "Keep going, dude! '{}' is almost done.",
            ]

    m = 0
    while total_seconds > 0:
        _notify_send(messages[m % len(messages)].format(task))
        time.sleep(min([total_seconds, interval]))
        total_seconds -= interval
        m += 1

    _notify_send("Time to focus on something else?!")


def _parse_command_line():
    parser = argparse.ArgumentParser(description="Command line utility to help "
            "staying focused")
    # display only 'on' command in public help
    subparsers = parser.add_subparsers(dest="command", metavar='{on}',
            title="available commands", )

    on_parser = subparsers.add_parser("on", help="start staying focused!")
    on_parser.add_argument("task", help="name of the task")
    on_parser.add_argument("-m", "--minutes", default="60",
            help="duration of session in minutes")

    daemon_parser = subparsers.add_parser("daemon", description="launch daemon")
    daemon_parser.add_argument("task")
    daemon_parser.add_argument("minutes")

    return parser.parse_args()


if __name__ == "__main__":
    args = vars(_parse_command_line())
    command = args.pop("command")

    if command == "on":
        # runs in the background because no reference is kept
        # https://stackoverflow.com/a/7224186/3865876
        subprocess.Popen([
            os.path.abspath(__file__),
            "daemon", args["task"], args["minutes"]
            ])
    elif command == "daemon":
        _run_daemon(**args)
